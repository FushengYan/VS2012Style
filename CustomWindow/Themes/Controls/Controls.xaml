<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib">
    <!-- VS2012Style CheckBox -->
    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
            Margin="15,0,0,0"
            StrokeThickness="1"
            Stroke="#60000000"
            StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundTextColor}" />
        <Setter Property="Background" Value="{DynamicResource MainBackgroundBrushMedium}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                              Width="13"
                              Height="13"
                              CornerRadius="0"
                              Background="{DynamicResource MainBackgroundBrushMedium}"
                              BorderBrush="{DynamicResource MainBackgroundBrushCont}"
                              BorderThickness="1">
                                <Path
                                                    Width="7" Height="7"
                                                    x:Name="CheckMark"
                                                    SnapsToDevicePixels="False"
                                                    Stroke="#979797"
                                                    StrokeThickness="2"
                                                    Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="8,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ApplicationAccentBrushSecondary}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource MainBackgroundBrushCont}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MainBackgroundBrushMedium}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- VS2012Style Button -->
    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundTextColor}" />
        <Setter Property="Background" Value="{DynamicResource MainBackgroundBrushMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MainBackgroundBrushCont}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="24" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <!-- Defaulted Button -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="false" />
                                <Condition Property="IsEnabled" Value="true" />
                                <Condition Property="IsDefaulted" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource ApplicationAccentBrush}" TargetName="Border" />
                        </MultiTrigger>

                        <!-- Focused Button -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="false" />
                                <Condition Property="IsEnabled" Value="true" />
                                <Condition Property="IsDefaulted" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource ApplicationAccentBrush}" TargetName="Border" />
                        </MultiTrigger>

                        <!-- Mouse Over -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="false" />
                                <Condition Property="IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource MainBackgroundBrushMedium}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ApplicationAccentBrushSecondary}" TargetName="Border" />
                        </MultiTrigger>

                        <!-- Mouse Pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="true" />
                                <Condition Property="IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource MainBackgroundBrushCont}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MainBackgroundBrushMedium}" TargetName="Border" />
                        </MultiTrigger>

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.33" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MainBackgroundBrushCont}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- VS2012Style Sidebar Header Button -->
    <Style x:Key="SidebarHeaderButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="60" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                    </Grid>

                    <ControlTemplate.Triggers>

                        <!-- Mouse Over -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="false" />
                                <Condition Property="IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#3e3e40" TargetName="Border" />
                        </MultiTrigger>

                        <!-- Mouse Pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="true" />
                                <Condition Property="IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ApplicationAccentBrushSecondary}" TargetName="Border" />
                        </MultiTrigger>

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="#161616" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ApplicationAccentBrushSecondary}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- VS2012Style Toggle Button -->
    <Style x:Key="PinButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{x:Null}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="-1,0,0,0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
                        <Grid x:Name="Pin" RenderTransformOrigin="0.5,0.5" Margin="0,0,0,0" SnapsToDevicePixels="True">
                        </Grid>
                        <Rectangle Opacity="0" Fill="White" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Mouse Over -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="false" />
                                <Condition Property="IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ApplicationAccentBrushSecondary}" TargetName="Border" />
                        </MultiTrigger>

                        <!-- Mouse Pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="true" />
                                <Condition Property="IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ApplicationAccentBrush}" />
                            <Setter Property="Opacity" Value="0.7" />
                        </MultiTrigger>

                        <!-- Checked Third State -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Pin" Property="RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="-90" />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="#161616" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ApplicationAccentBrushSecondary}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- VS2012Style Sidebar Button -->
    <Style x:Key="SidebarButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource LigthTextColor}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="#FFA8A8A8" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="50" />
        <Setter Property="FontSize" Value="25" />
        <Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
        <Setter Property="Padding" Value="-1,0,0,0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
                        <Grid x:Name="Pin" RenderTransformOrigin="0.5,0.5" Margin="0,0,0,0" SnapsToDevicePixels="True">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Mouse Over -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="false" />
                                <Condition Property="IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ApplicationAccentBrushSecondary}" TargetName="Border" />
                        </MultiTrigger>

                        <!-- Mouse Pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
                                <Condition Property="IsPressed" Value="true" />
                                <Condition Property="IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ApplicationAccentBrush}" TargetName="Border" />
                            <Setter Property="Opacity" Value="0.7" />
                        </MultiTrigger>

                        <!-- Checked Third State -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ApplicationAccentBrush}" TargetName="Border" />
                            <Setter Property="Opacity" Value="1.0" />
                        </Trigger>

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="#161616" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ApplicationAccentBrushSecondary}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundTextColor}" />
        <Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- VS2012Style Textbox -->
    <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundTextColor}" />
        <Setter Property="Background" Value="{DynamicResource MainBackgroundBrushMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MainBackgroundBrushCont}" />
        <Setter Property="CaretBrush" Value="{DynamicResource ForegroundTextColor}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ApplicationAccentBrushSecondary}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" Value="{DynamicResource MainBackgroundBrushCont}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ApplicationAccentBrushSecondary}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- VS2012Style TextBlock -->
    <Style x:Key="GenericTextblock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#999999" />
        <Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
    </Style>

    <!-- VS2012Style Expander -->
    <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
        <Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundTextColor}" />
        <Setter Property="Background" Value="{DynamicResource MainBackgroundBrushMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MainBackgroundBrushCont}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
</ResourceDictionary>